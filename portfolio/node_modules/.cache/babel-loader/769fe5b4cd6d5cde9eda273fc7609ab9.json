{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StackActions = void 0;\nexports.default = StackRouter;\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexports.StackActions = StackActions;\nfunction StackRouter(options) {\n  const router = {\n    ..._BaseRouter.default,\n    type: 'stack',\n    getInitialState(_ref) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref;\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${(0, _nonSecure.nanoid)()}`,\n        index: 0,\n        routeNames,\n        routes: [{\n          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, _ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({\n        ...route,\n        key: route.key || `${route.name}-${(0, _nonSecure.nanoid)()}`,\n        params: routeParamList[route.name] !== undefined ? {\n          ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${(0, _nonSecure.nanoid)()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n    getStateForRouteNamesChange(state, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref3;\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return {\n              ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : `${name}-${(0, _nonSecure.nanoid)()}`,\n                name,\n                params: routeParamList[name] !== undefined ? {\n                  ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push({\n                ...route,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              });\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n          return null;\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return {\n                ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n\n            // If the route already exists, navigate to that\n            let index = -1;\n            const getId =\n            // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (index === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n              const routes = [...state.routes, {\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1\n              };\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...route.params,\n                ...action.payload.params\n              } : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            }\n            return {\n              ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params || action.payload.path && action.payload.path !== route.path ? {\n                ...route,\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : route.path,\n                params\n              } : state.routes[index]]\n            };\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  };\n  return router;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;AAiFO,MAAMA,YAAY,GAAG;EAC1BC,OAAO,CAACC,IAAD,EAAeC,MAAf,EAAiD;IACtD,OAAO;MAAEC,IAAI,EAAE,SAAR;MAAmBC,OAAO,EAAE;QAAEH,IAAF;QAAQC;MAAR;IAA5B,CAAP;EACD,CAHyB;EAI1BG,IAAI,CAACJ,IAAD,EAAeC,MAAf,EAAiD;IACnD,OAAO;MAAEC,IAAI,EAAE,MAAR;MAAgBC,OAAO,EAAE;QAAEH,IAAF;QAAQC;MAAR;IAAzB,CAAP;EACD,CANyB;EAO1BI,GAAG,GAAqC;IAAA,IAApCC,KAAoC,uEAApB,CAAoB;IACtC,OAAO;MAAEJ,IAAI,EAAE,KAAR;MAAeC,OAAO,EAAE;QAAEG;MAAF;IAAxB,CAAP;EACD,CATyB;EAU1BC,QAAQ,GAAoB;IAC1B,OAAO;MAAEL,IAAI,EAAE;IAAR,CAAP;EACD;AAZyB,CAArB;;AAeQ,SAASM,WAAT,CAAqBC,OAArB,EAAkD;EAC/D,MAAMC,MAGL,GAAG;IACF,GAAGC,mBADD;IAGFT,IAAI,EAAE,OAHJ;IAKFU,eAAe,OAAiC;MAAA,IAAhC;QAAEC,UAAF;QAAcC;MAAd,CAAgC;MAC9C,MAAMC,gBAAgB,GACpBN,OAAO,CAACM,gBAAR,KAA6BC,SAA7B,IACAH,UAAU,CAACI,QAAX,CAAoBR,OAAO,CAACM,gBAA5B,CADA,GAEIN,OAAO,CAACM,gBAFZ,GAGIF,UAAU,CAAC,CAAD,CAJhB;MAMA,OAAO;QACLK,KAAK,EAAE,KADF;QAELhB,IAAI,EAAE,OAFD;QAGLiB,GAAG,EAAG,SAAQ,wBAAS,EAHlB;QAILC,KAAK,EAAE,CAJF;QAKLP,UALK;QAMLQ,MAAM,EAAE,CACN;UACEF,GAAG,EAAG,GAAEJ,gBAAiB,IAAG,wBAAS,EADvC;UAEEf,IAAI,EAAEe,gBAFR;UAGEd,MAAM,EAAEa,cAAc,CAACC,gBAAD;QAHxB,CADM;MANH,CAAP;IAcD,CA1BC;IA4BFO,kBAAkB,CAACC,YAAD,SAA+C;MAAA,IAAhC;QAAEV,UAAF;QAAcC;MAAd,CAAgC;MAC/D,IAAIU,KAAK,GAAGD,YAAZ;MAEA,IAAIC,KAAK,CAACN,KAAN,KAAgB,KAApB,EAA2B;QACzB,OAAOM,KAAP;MACD;MAED,MAAMH,MAAM,GAAGG,KAAK,CAACH,MAAN,CACZI,MADY,CACJC,KAAD,IAAWb,UAAU,CAACI,QAAX,CAAoBS,KAAK,CAAC1B,IAA1B,CADN,EAEZ2B,GAFY,CAGVD,KAAD,KACG;QACC,GAAGA,KADJ;QAECP,GAAG,EAAEO,KAAK,CAACP,GAAN,IAAc,GAAEO,KAAK,CAAC1B,IAAK,IAAG,wBAAS,EAF7C;QAGCC,MAAM,EACJa,cAAc,CAACY,KAAK,CAAC1B,IAAP,CAAd,KAA+BgB,SAA/B,GACI;UACE,GAAGF,cAAc,CAACY,KAAK,CAAC1B,IAAP,CADnB;UAEE,GAAG0B,KAAK,CAACzB;QAFX,CADJ,GAKIyB,KAAK,CAACzB;MATb,CADH,CAHW,CAAf;MAiBA,IAAIoB,MAAM,CAACO,MAAP,KAAkB,CAAtB,EAAyB;QACvB,MAAMb,gBAAgB,GACpBN,OAAO,CAACM,gBAAR,KAA6BC,SAA7B,GACIP,OAAO,CAACM,gBADZ,GAEIF,UAAU,CAAC,CAAD,CAHhB;QAKAQ,MAAM,CAACjB,IAAP,CAAY;UACVe,GAAG,EAAG,GAAEJ,gBAAiB,IAAG,wBAAS,EAD3B;UAEVf,IAAI,EAAEe,gBAFI;UAGVd,MAAM,EAAEa,cAAc,CAACC,gBAAD;QAHZ,CAAZ;MAKD;MAED,OAAO;QACLG,KAAK,EAAE,KADF;QAELhB,IAAI,EAAE,OAFD;QAGLiB,GAAG,EAAG,SAAQ,wBAAS,EAHlB;QAILC,KAAK,EAAEC,MAAM,CAACO,MAAP,GAAgB,CAJlB;QAKLf,UALK;QAMLQ;MANK,CAAP;IAQD,CAzEC;IA2EFQ,2BAA2B,CACzBL,KADyB,SAGzB;MAAA,IADA;QAAEX,UAAF;QAAcC,cAAd;QAA8BgB;MAA9B,CACA;MACA,MAAMT,MAAM,GAAGG,KAAK,CAACH,MAAN,CAAaI,MAAb,CACZC,KAAD,IACEb,UAAU,CAACI,QAAX,CAAoBS,KAAK,CAAC1B,IAA1B,KACA,CAAC8B,eAAe,CAACb,QAAhB,CAAyBS,KAAK,CAAC1B,IAA/B,CAHU,CAAf;MAMA,IAAIqB,MAAM,CAACO,MAAP,KAAkB,CAAtB,EAAyB;QACvB,MAAMb,gBAAgB,GACpBN,OAAO,CAACM,gBAAR,KAA6BC,SAA7B,IACAH,UAAU,CAACI,QAAX,CAAoBR,OAAO,CAACM,gBAA5B,CADA,GAEIN,OAAO,CAACM,gBAFZ,GAGIF,UAAU,CAAC,CAAD,CAJhB;QAMAQ,MAAM,CAACjB,IAAP,CAAY;UACVe,GAAG,EAAG,GAAEJ,gBAAiB,IAAG,wBAAS,EAD3B;UAEVf,IAAI,EAAEe,gBAFI;UAGVd,MAAM,EAAEa,cAAc,CAACC,gBAAD;QAHZ,CAAZ;MAKD;MAED,OAAO;QACL,GAAGS,KADE;QAELX,UAFK;QAGLQ,MAHK;QAILD,KAAK,EAAEW,IAAI,CAACC,GAAL,CAASR,KAAK,CAACJ,KAAf,EAAsBC,MAAM,CAACO,MAAP,GAAgB,CAAtC;MAJF,CAAP;IAMD,CAzGC;IA2GFK,qBAAqB,CAACT,KAAD,EAAQL,GAAR,EAAa;MAChC,MAAMC,KAAK,GAAGI,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAAChB,GAAF,KAAUA,GAAxC,CAAd;MAEA,IAAIC,KAAK,KAAK,CAAC,CAAX,IAAgBA,KAAK,KAAKI,KAAK,CAACJ,KAApC,EAA2C;QACzC,OAAOI,KAAP;MACD;MAED,OAAO;QACL,GAAGA,KADE;QAELJ,KAFK;QAGLC,MAAM,EAAEG,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmB,CAAnB,EAAsBhB,KAAK,GAAG,CAA9B;MAHH,CAAP;IAKD,CAvHC;IAyHFiB,iBAAiB,CAACb,KAAD,EAAQc,MAAR,EAAgB7B,OAAhB,EAAyB;MACxC,MAAM;QAAEK;MAAF,IAAqBL,OAA3B;MAEA,QAAQ6B,MAAM,CAACpC,IAAf;QACE,KAAK,SAAL;UAAgB;YACd,MAAMkB,KAAK,GACTkB,MAAM,CAACC,MAAP,KAAkBf,KAAK,CAACL,GAAxB,IAA+BmB,MAAM,CAACE,MAAtC,GACIhB,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAAChB,GAAF,KAAUmB,MAAM,CAACE,MAA/C,CADJ,GAEIhB,KAAK,CAACJ,KAHZ;YAKA,IAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;cAChB,OAAO,IAAP;YACD;YAED,MAAM;cAAEpB,IAAF;cAAQmB,GAAR;cAAalB;YAAb,IAAwBqC,MAAM,CAACnC,OAArC;YAEA,IAAI,CAACqB,KAAK,CAACX,UAAN,CAAiBI,QAAjB,CAA0BjB,IAA1B,CAAL,EAAsC;cACpC,OAAO,IAAP;YACD;YAED,OAAO;cACL,GAAGwB,KADE;cAELH,MAAM,EAAEG,KAAK,CAACH,MAAN,CAAaM,GAAb,CAAiB,CAACD,KAAD,EAAQe,CAAR,KACvBA,CAAC,KAAKrB,KAAN,GACI;gBACED,GAAG,EAAEA,GAAG,KAAKH,SAAR,GAAoBG,GAApB,GAA2B,GAAEnB,IAAK,IAAG,wBAAS,EADrD;gBAEEA,IAFF;gBAGEC,MAAM,EACJa,cAAc,CAACd,IAAD,CAAd,KAAyBgB,SAAzB,GACI;kBACE,GAAGF,cAAc,CAACd,IAAD,CADnB;kBAEE,GAAGC;gBAFL,CADJ,GAKIA;cATR,CADJ,GAYIyB,KAbE;YAFH,CAAP;UAkBD;QAED,KAAK,MAAL;UACE,IAAIF,KAAK,CAACX,UAAN,CAAiBI,QAAjB,CAA0BqB,MAAM,CAACnC,OAAP,CAAeH,IAAzC,CAAJ,EAAoD;YAClD,MAAM0C,KAAK,GAAGjC,OAAO,CAACkC,cAAR,CAAuBL,MAAM,CAACnC,OAAP,CAAeH,IAAtC,CAAd;YACA,MAAM4C,EAAE,GAAGF,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAG;cAAEzC,MAAM,EAAEqC,MAAM,CAACnC,OAAP,CAAeF;YAAzB,CAAH,CAAhB;YAEA,MAAMyB,KAAK,GAAGkB,EAAE,GACZpB,KAAK,CAACH,MAAN,CAAawB,IAAb,CACGnB,KAAD,IACEA,KAAK,CAAC1B,IAAN,KAAesC,MAAM,CAACnC,OAAP,CAAeH,IAA9B,IACA4C,EAAE,MAAKF,KAAL,aAAKA,KAAL,uBAAKA,KAAK,CAAG;cAAEzC,MAAM,EAAEyB,KAAK,CAACzB;YAAhB,CAAH,CAAV,CAHN,CADY,GAMZe,SANJ;YAQA,IAAIK,MAAJ;YAEA,IAAIK,KAAJ,EAAW;cACTL,MAAM,GAAGG,KAAK,CAACH,MAAN,CAAaI,MAAb,CAAqBU,CAAD,IAAOA,CAAC,CAAChB,GAAF,KAAUO,KAAK,CAACP,GAA3C,CAAT;cACAE,MAAM,CAACjB,IAAP,CAAY;gBACV,GAAGsB,KADO;gBAEVzB,MAAM,EACJa,cAAc,CAACwB,MAAM,CAACnC,OAAP,CAAeH,IAAhB,CAAd,KAAwCgB,SAAxC,GACI;kBACE,GAAGF,cAAc,CAACwB,MAAM,CAACnC,OAAP,CAAeH,IAAhB,CADnB;kBAEE,GAAGsC,MAAM,CAACnC,OAAP,CAAeF;gBAFpB,CADJ,GAKIqC,MAAM,CAACnC,OAAP,CAAeF;cARX,CAAZ;YAUD,CAZD,MAYO;cACLoB,MAAM,GAAG,CACP,GAAGG,KAAK,CAACH,MADF,EAEP;gBACEF,GAAG,EAAG,GAAEmB,MAAM,CAACnC,OAAP,CAAeH,IAAK,IAAG,wBAAS,EAD1C;gBAEEA,IAAI,EAAEsC,MAAM,CAACnC,OAAP,CAAeH,IAFvB;gBAGEC,MAAM,EACJa,cAAc,CAACwB,MAAM,CAACnC,OAAP,CAAeH,IAAhB,CAAd,KAAwCgB,SAAxC,GACI;kBACE,GAAGF,cAAc,CAACwB,MAAM,CAACnC,OAAP,CAAeH,IAAhB,CADnB;kBAEE,GAAGsC,MAAM,CAACnC,OAAP,CAAeF;gBAFpB,CADJ,GAKIqC,MAAM,CAACnC,OAAP,CAAeF;cATvB,CAFO,CAAT;YAcD;YAED,OAAO;cACL,GAAGuB,KADE;cAELJ,KAAK,EAAEC,MAAM,CAACO,MAAP,GAAgB,CAFlB;cAGLP;YAHK,CAAP;UAKD;UAED,OAAO,IAAP;QAEF,KAAK,KAAL;UAAY;YACV,MAAMD,KAAK,GACTkB,MAAM,CAACC,MAAP,KAAkBf,KAAK,CAACL,GAAxB,IAA+BmB,MAAM,CAACE,MAAtC,GACIhB,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAAChB,GAAF,KAAUmB,MAAM,CAACE,MAA/C,CADJ,GAEIhB,KAAK,CAACJ,KAHZ;YAKA,IAAIA,KAAK,GAAG,CAAZ,EAAe;cACb,MAAMd,KAAK,GAAGyB,IAAI,CAACe,GAAL,CAAS1B,KAAK,GAAGkB,MAAM,CAACnC,OAAP,CAAeG,KAAvB,GAA+B,CAAxC,EAA2C,CAA3C,CAAd;cACA,MAAMe,MAAM,GAAGG,KAAK,CAACH,MAAN,CACZe,KADY,CACN,CADM,EACH9B,KADG,EAEZyC,MAFY,CAELvB,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmBhB,KAAK,GAAG,CAA3B,CAFK,CAAf;cAIA,OAAO;gBACL,GAAGI,KADE;gBAELJ,KAAK,EAAEC,MAAM,CAACO,MAAP,GAAgB,CAFlB;gBAGLP;cAHK,CAAP;YAKD;YAED,OAAO,IAAP;UACD;QAED,KAAK,YAAL;UACE,OAAOX,MAAM,CAAC2B,iBAAP,CACLb,KADK,EAEL;YACEtB,IAAI,EAAE,KADR;YAEEC,OAAO,EAAE;cAAEG,KAAK,EAAEkB,KAAK,CAACH,MAAN,CAAaO,MAAb,GAAsB;YAA/B;UAFX,CAFK,EAMLnB,OANK,CAAP;QASF,KAAK,UAAL;UACE,IACE6B,MAAM,CAACnC,OAAP,CAAeH,IAAf,KAAwBgB,SAAxB,IACA,CAACQ,KAAK,CAACX,UAAN,CAAiBI,QAAjB,CAA0BqB,MAAM,CAACnC,OAAP,CAAeH,IAAzC,CAFH,EAGE;YACA,OAAO,IAAP;UACD;UAED,IAAIsC,MAAM,CAACnC,OAAP,CAAegB,GAAf,IAAsBmB,MAAM,CAACnC,OAAP,CAAeH,IAAzC,EAA+C;YAAA;;YAC7C;YACA,IAAIoB,KAAK,GAAG,CAAC,CAAb;YAEA,MAAMsB,KAAK;YACT;YACAJ,MAAM,CAACnC,OAAP,CAAegB,GAAf,KAAuBH,SAAvB,IACAsB,MAAM,CAACnC,OAAP,CAAeH,IAAf,KAAwBgB,SADxB,GAEIP,OAAO,CAACkC,cAAR,CAAuBL,MAAM,CAACnC,OAAP,CAAeH,IAAtC,CAFJ,GAGIgB,SALN;YAMA,MAAM4B,EAAE,GAAGF,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAG;cAAEzC,MAAM,EAAEqC,MAAM,CAACnC,OAAP,CAAeF;YAAzB,CAAH,CAAhB;YAEA,IAAI2C,EAAJ,EAAQ;cACNxB,KAAK,GAAGI,KAAK,CAACH,MAAN,CAAaa,SAAb,CACLR,KAAD,IACEA,KAAK,CAAC1B,IAAN,KAAesC,MAAM,CAACnC,OAAP,CAAeH,IAA9B,IACA4C,EAAE,MAAKF,KAAL,aAAKA,KAAL,uBAAKA,KAAK,CAAG;gBAAEzC,MAAM,EAAEyB,KAAK,CAACzB;cAAhB,CAAH,CAAV,CAHE,CAAR;YAKD,CAND,MAMO,IACJuB,KAAK,CAACH,MAAN,CAAaG,KAAK,CAACJ,KAAnB,EAA0BpB,IAA1B,KAAmCsC,MAAM,CAACnC,OAAP,CAAeH,IAAlD,IACCsC,MAAM,CAACnC,OAAP,CAAegB,GAAf,KAAuBH,SADzB,IAEAQ,KAAK,CAACH,MAAN,CAAaG,KAAK,CAACJ,KAAnB,EAA0BD,GAA1B,KAAkCmB,MAAM,CAACnC,OAAP,CAAegB,GAH5C,EAIL;cACAC,KAAK,GAAGI,KAAK,CAACJ,KAAd;YACD,CANM,MAMA;cACL,KAAK,IAAIqB,CAAC,GAAGjB,KAAK,CAACH,MAAN,CAAaO,MAAb,GAAsB,CAAnC,EAAsCa,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;gBACjD,IACGjB,KAAK,CAACH,MAAN,CAAaoB,CAAb,EAAgBzC,IAAhB,KAAyBsC,MAAM,CAACnC,OAAP,CAAeH,IAAxC,IACCsC,MAAM,CAACnC,OAAP,CAAegB,GAAf,KAAuBH,SADzB,IAEAQ,KAAK,CAACH,MAAN,CAAaoB,CAAb,EAAgBtB,GAAhB,KAAwBmB,MAAM,CAACnC,OAAP,CAAegB,GAHzC,EAIE;kBACAC,KAAK,GAAGqB,CAAR;kBACA;gBACD;cACF;YACF;YAED,IACErB,KAAK,KAAK,CAAC,CAAX,IACAkB,MAAM,CAACnC,OAAP,CAAegB,GADf,IAEAmB,MAAM,CAACnC,OAAP,CAAeH,IAAf,KAAwBgB,SAH1B,EAIE;cACA,OAAO,IAAP;YACD;YAED,IAAII,KAAK,KAAK,CAAC,CAAX,IAAgBkB,MAAM,CAACnC,OAAP,CAAeH,IAAf,KAAwBgB,SAA5C,EAAuD;cAAA;cACrD,MAAMK,MAAM,GAAG,CACb,GAAGG,KAAK,CAACH,MADI,EAEb;gBACEF,GAAG,yBACDmB,MAAM,CAACnC,OAAP,CAAegB,GADd,qEACsB,GAAEmB,MAAM,CAACnC,OAAP,CAAeH,IAAK,IAAG,wBAAS,EAF7D;gBAGEA,IAAI,EAAEsC,MAAM,CAACnC,OAAP,CAAeH,IAHvB;gBAIEgD,IAAI,EAAEV,MAAM,CAACnC,OAAP,CAAe6C,IAJvB;gBAKE/C,MAAM,EACJa,cAAc,CAACwB,MAAM,CAACnC,OAAP,CAAeH,IAAhB,CAAd,KAAwCgB,SAAxC,GACI;kBACE,GAAGF,cAAc,CAACwB,MAAM,CAACnC,OAAP,CAAeH,IAAhB,CADnB;kBAEE,GAAGsC,MAAM,CAACnC,OAAP,CAAeF;gBAFpB,CADJ,GAKIqC,MAAM,CAACnC,OAAP,CAAeF;cAXvB,CAFa,CAAf;cAiBA,OAAO;gBACL,GAAGuB,KADE;gBAELH,MAFK;gBAGLD,KAAK,EAAEC,MAAM,CAACO,MAAP,GAAgB;cAHlB,CAAP;YAKD;YAED,MAAMF,KAAK,GAAGF,KAAK,CAACH,MAAN,CAAaD,KAAb,CAAd;YAEA,IAAInB,MAAJ;YAEA,IAAIqC,MAAM,CAACnC,OAAP,CAAe8C,KAAnB,EAA0B;cACxBhD,MAAM,GACJqC,MAAM,CAACnC,OAAP,CAAeF,MAAf,KAA0Be,SAA1B,IACAF,cAAc,CAACY,KAAK,CAAC1B,IAAP,CAAd,KAA+BgB,SAD/B,GAEI;gBACE,GAAGF,cAAc,CAACY,KAAK,CAAC1B,IAAP,CADnB;gBAEE,GAAG0B,KAAK,CAACzB,MAFX;gBAGE,GAAGqC,MAAM,CAACnC,OAAP,CAAeF;cAHpB,CAFJ,GAOIyB,KAAK,CAACzB,MARZ;YASD,CAVD,MAUO;cACLA,MAAM,GACJa,cAAc,CAACY,KAAK,CAAC1B,IAAP,CAAd,KAA+BgB,SAA/B,GACI;gBACE,GAAGF,cAAc,CAACY,KAAK,CAAC1B,IAAP,CADnB;gBAEE,GAAGsC,MAAM,CAACnC,OAAP,CAAeF;cAFpB,CADJ,GAKIqC,MAAM,CAACnC,OAAP,CAAeF,MANrB;YAOD;YAED,OAAO;cACL,GAAGuB,KADE;cAELJ,KAFK;cAGLC,MAAM,EAAE,CACN,GAAGG,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmB,CAAnB,EAAsBhB,KAAtB,CADG,EAENnB,MAAM,KAAKyB,KAAK,CAACzB,MAAjB,IACCqC,MAAM,CAACnC,OAAP,CAAe6C,IAAf,IAAuBV,MAAM,CAACnC,OAAP,CAAe6C,IAAf,KAAwBtB,KAAK,CAACsB,IADtD,GAEI;gBACE,GAAGtB,KADL;gBAEEsB,IAAI,0BAAEV,MAAM,CAACnC,OAAP,CAAe6C,IAAjB,uEAAyBtB,KAAK,CAACsB,IAFrC;gBAGE/C;cAHF,CAFJ,GAOIuB,KAAK,CAACH,MAAN,CAAaD,KAAb,CATE;YAHH,CAAP;UAeD;UAED,OAAO,IAAP;QAEF,KAAK,SAAL;UACE,IAAII,KAAK,CAACJ,KAAN,GAAc,CAAlB,EAAqB;YACnB,OAAOV,MAAM,CAAC2B,iBAAP,CACLb,KADK,EAEL;cACEtB,IAAI,EAAE,KADR;cAEEC,OAAO,EAAE;gBAAEG,KAAK,EAAE;cAAT,CAFX;cAGEiC,MAAM,EAAED,MAAM,CAACC,MAHjB;cAIEC,MAAM,EAAEF,MAAM,CAACE;YAJjB,CAFK,EAQL/B,OARK,CAAP;UAUD;UAED,OAAO,IAAP;QAEF;UACE,OAAOE,oBAAW0B,iBAAX,CAA6Bb,KAA7B,EAAoCc,MAApC,CAAP;MAAA;IAEL,CAlYC;IAoYFY,cAAc,EAAEpD;EApYd,CAHJ;EA0YA,OAAOY,MAAP;AACD","names":["StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","BaseRouter","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","path","merge","actionCreators"],"sources":["C:\\Users\\Iler_\\Desktop\\Development\\iw\\portfolio\\node_modules\\@react-navigation\\routers\\lib\\commonjs\\StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"script"}