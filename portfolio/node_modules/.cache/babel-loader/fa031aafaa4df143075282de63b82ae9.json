{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\nvar _DefaultTheme = _interopRequireDefault(require(\"./theming/DefaultTheme\"));\nvar _ThemeProvider = _interopRequireDefault(require(\"./theming/ThemeProvider\"));\nvar _useBackButton = _interopRequireDefault(require(\"./useBackButton\"));\nvar _useDocumentTitle = _interopRequireDefault(require(\"./useDocumentTitle\"));\nvar _useLinking = _interopRequireDefault(require(\"./useLinking\"));\nvar _useThenable = _interopRequireDefault(require(\"./useThenable\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(_ref, ref) {\n  let {\n    theme = _DefaultTheme.default,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  } = _ref;\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n  if (linking !== null && linking !== void 0 && linking.config) {\n    (0, _core.validatePathConfig)(linking.config);\n  }\n  const refContainer = React.useRef(null);\n  (0, _useBackButton.default)(refContainer);\n  (0, _useDocumentTitle.default)(refContainer, documentTitle);\n  const {\n    getInitialState\n  } = (0, _useLinking.default)(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking\n  }); // Add additional linking related info to the ref\n  // This will be used by the devtools\n\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          var _linking$prefixes, _linking$getStateFrom, _linking$getPathFromS, _linking$getActionFro;\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: (_linking$prefixes = linking === null || linking === void 0 ? void 0 : linking.prefixes) !== null && _linking$prefixes !== void 0 ? _linking$prefixes : [],\n            getStateFromPath: (_linking$getStateFrom = linking === null || linking === void 0 ? void 0 : linking.getStateFromPath) !== null && _linking$getStateFrom !== void 0 ? _linking$getStateFrom : _core.getStateFromPath,\n            getPathFromState: (_linking$getPathFromS = linking === null || linking === void 0 ? void 0 : linking.getPathFromState) !== null && _linking$getPathFromS !== void 0 ? _linking$getPathFromS : _core.getPathFromState,\n            getActionFromState: (_linking$getActionFro = linking === null || linking === void 0 ? void 0 : linking.getActionFromState) !== null && _linking$getActionFro !== void 0 ? _linking$getActionFro : _core.getActionFromState\n          };\n        }\n      });\n    }\n  });\n  const [isResolved, initialState] = (0, _useThenable.default)(getInitialState);\n  React.useImperativeHandle(ref, () => refContainer.current);\n  const linkingContext = React.useMemo(() => ({\n    options: linking\n  }), [linking]);\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n  const onReadyRef = React.useRef(onReady);\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n  React.useEffect(() => {\n    if (isReady) {\n      var _onReadyRef$current;\n      (_onReadyRef$current = onReadyRef.current) === null || _onReadyRef$current === void 0 ? void 0 : _onReadyRef$current.call(onReadyRef);\n    }\n  }, [isReady]);\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback;\n  }\n  return /*#__PURE__*/React.createElement(_LinkingContext.default.Provider, {\n    value: linkingContext\n  }, /*#__PURE__*/React.createElement(_ThemeProvider.default, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(_core.BaseNavigationContainer, _extends({}, rest, {\n    initialState: rest.initialState == null ? initialState : rest.initialState,\n    ref: refContainer\n  }))));\n}\nconst NavigationContainer = /*#__PURE__*/React.forwardRef(NavigationContainerInner);\nvar _default = NavigationContainer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["global","REACT_NAVIGATION_DEVTOOLS","WeakMap","NavigationContainerInner","ref","theme","DefaultTheme","linking","fallback","documentTitle","onReady","rest","isLinkingEnabled","enabled","config","refContainer","React","useRef","getInitialState","independent","prefixes","useEffect","current","set","getStateFromPath","getPathFromState","getActionFromState","isResolved","initialState","useImperativeHandle","linkingContext","useMemo","options","isReady","onReadyRef","_LinkingContext","Provider","value","_ThemeProvider","_core","NavigationContainer","forwardRef"],"sources":["C:\\Users\\Iler_\\Desktop\\Development\\iw\\portfolio\\node_modules\\@react-navigation\\native\\lib\\commonjs\\NavigationContainer.tsx"],"sourcesContent":["import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"]},"metadata":{},"sourceType":"script"}