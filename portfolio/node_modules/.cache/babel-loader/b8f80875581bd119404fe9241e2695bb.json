{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useDocumentTitle;\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Set the document title for the active screen\n */\nfunction useDocumentTitle(ref) {\n  let {\n    enabled = true,\n    formatter = (options, route) => {\n      var _options$title;\n      return (_options$title = options === null || options === void 0 ? void 0 : options.title) !== null && _options$title !== void 0 ? _options$title : route === null || route === void 0 ? void 0 : route.name;\n    }\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const navigation = ref.current;\n    if (navigation) {\n      const title = formatter(navigation.getCurrentOptions(), navigation.getCurrentRoute());\n      document.title = title;\n    }\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('options', e => {\n      const title = formatter(e.data.options, navigation === null || navigation === void 0 ? void 0 : navigation.getCurrentRoute());\n      document.title = title;\n    });\n  });\n}","map":{"version":3,"mappings":";;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACe,SAASA,gBAAT,CACbC,GADa,EAMb;EAAA,IAJA;IACEC,OAAO,GAAG,IADZ;IAEEC,SAAS,GAAG,CAACC,OAAD,EAAUC,KAAV;MAAA;MAAA,yBAAoBD,OAApB,aAAoBA,OAApB,uBAAoBA,OAAO,CAAEE,KAA7B,2DAAsCD,KAAtC,aAAsCA,KAAtC,uBAAsCA,KAAK,CAAEE,IAA7C;IAAA;EAFd,CAIA,uEAD0B,EAC1B;EACAC,KAAK,CAACC,SAAN,CAAgB,MAAM;IACpB,IAAI,CAACP,OAAL,EAAc;MACZ;IACD;IAED,MAAMQ,UAAU,GAAGT,GAAG,CAACU,OAAvB;IAEA,IAAID,UAAJ,EAAgB;MACd,MAAMJ,KAAK,GAAGH,SAAS,CACrBO,UAAU,CAACE,iBAAX,EADqB,EAErBF,UAAU,CAACG,eAAX,EAFqB,CAAvB;MAKAC,QAAQ,CAACR,KAAT,GAAiBA,KAAjB;IACD;IAED,OAAOI,UAAP,aAAOA,UAAP,uBAAOA,UAAU,CAAEK,WAAZ,CAAwB,SAAxB,EAAoCC,CAAD,IAAO;MAC/C,MAAMV,KAAK,GAAGH,SAAS,CAACa,CAAC,CAACC,IAAF,CAAOb,OAAR,EAAiBM,UAAjB,aAAiBA,UAAjB,uBAAiBA,UAAU,CAAEG,eAAZ,EAAjB,CAAvB;MAEAC,QAAQ,CAACR,KAAT,GAAiBA,KAAjB;IACD,CAJM,CAAP;EAKD,CArBD;AAsBD","names":["useDocumentTitle","ref","enabled","formatter","options","route","title","name","React","useEffect","navigation","current","getCurrentOptions","getCurrentRoute","document","addListener","e","data"],"sources":["C:\\Users\\Iler_\\Desktop\\Development\\iw\\portfolio\\node_modules\\@react-navigation\\native\\lib\\commonjs\\useDocumentTitle.tsx"],"sourcesContent":["import type {\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport type { DocumentTitleOptions } from './types';\n\n/**\n * Set the document title for the active screen\n */\nexport default function useDocumentTitle(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    enabled = true,\n    formatter = (options, route) => options?.title ?? route?.name,\n  }: DocumentTitleOptions = {}\n) {\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const navigation = ref.current;\n\n    if (navigation) {\n      const title = formatter(\n        navigation.getCurrentOptions(),\n        navigation.getCurrentRoute()\n      );\n\n      document.title = title;\n    }\n\n    return navigation?.addListener('options', (e) => {\n      const title = formatter(e.data.options, navigation?.getCurrentRoute());\n\n      document.title = title;\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}